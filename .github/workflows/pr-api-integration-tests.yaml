name: Pull Request â€” API Integration Tests

on:
  pull_request:
    branches: [main]
    paths:
      - "api/**"
      - ".github/workflows/pr-api-integration-tests.yaml"

env:
  ENVIRONMENT: local
  FRONTEND_PORT: 8080
  FRONTEND_URL: http://localhost:8080
  POSTGRES_PORT: 5432
  POSTGRES_DB: salary-app-db
  POSTGRES_USER: db-admin
  API_PORT: 3000

jobs:
  containerized-tests:
    name: Containerized Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      # Setup Environment Variables
      - name: Setup Environment Variables
        run: |
          touch .env
          echo "ENVIRONMENT=local" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "API_PORT=${{ secrets.API_PORT }}" >> .env
          echo "DATABASE_URL=${{ secrets.POSTGRES_HOST }}://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ secrets.POSTGRES_HOST }}:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }}?schema=public" >> .env
          echo "SSO_AUTH_SERVER=${{ secrets.SSO_AUTH_SERVER }}" >> .env
          echo "SSO_CLIENT_ID=${{ secrets.SSO_CLIENT_ID }}" >> .env
          echo "SSO_CLIENT_SECRET=${{ secrets.SSO_CLIENT_SECRET }}" >> .env
          echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .en

      - name: Spin Up API and POSTGRES Images
        run: |
          docker-compose -f docker-compose.dev.yaml build db api
      
      - name: Wait for POSTGRES Healthcheck
        uses: stringbean/docker-healthcheck-action@v1
        with:
          container: db
          wait-time: 60
          require-status: running
          require-healthy: true
        
      - name: Wait for API Healthcheck
        uses: stringbean/docker-healthcheck-action@v1
        id: api-healthcheck
        continue-on-error: true
        with:
          container: api
          wait-time: 60
          require-status: running
          require-healthy: true
      
      - name: Print Docker API Logs
        run: |
          docker logs api

      - name: Stop if API Failed
        if: steps.api-healthcheck.outcome == 'failure'
        run: |
          exit 1
        
      - name: Install Integration Testing Dependencies
        working-directory: ./api
        run: |
          npm i jest supertest ts-jest dotenv @types/jest
      
      - name: Run API Integration Tests
        working-directory: ./api
        run: |
          npm run test
