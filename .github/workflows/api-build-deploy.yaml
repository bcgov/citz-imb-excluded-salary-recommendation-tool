name: Build and Deploy API

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
  workflow_dispatch:

jobs:
  build-tag-push:
    name: Build, Tag, and Push to OpenShift Image Registry
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_SA_TOOLS_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_TOOLS_NAMESPACE }}

      # Login to BC Gov Docker Image Repository
      - name: Login to Openshift Docker
        run : |
          docker login ${{ secrets.IMAGE_REPOSITORY }} -u ${{ secrets.OPENSHIFT_SA_NAME }} -p ${{ secrets.OPENSHIFT_SA_TOOLS_TOKEN }}

      # Setup Environment Variables
      - name: Setup Environment Variables
        run: |
          touch .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "API_PORT=${{ secrets.API_PORT }}" >> .env

      - name: Build API Image
        run: |
          docker-compose -f docker-compose.dev.yaml build api

      - name: List Docker Images
        run: |
          docker image ls

      - name: Tag API Image
        run: |
          docker tag citz-imb-salary-estimate-tool_api ${{ secrets.IMAGE_REPOSITORY }}/ec1236-tools/set-api:latest

      - name: List Docker Images
        run: |
          docker image ls

      - name: Push API Image
        run: |
          docker push ${{ secrets.IMAGE_REPOSITORY }}/ec1236-tools/set-api:latest

  deploy:
    name: Deploy to OpenShift
    runs-on: ubuntu-latest
    needs: [ build-tag-push ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_SA_TOOLS_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_DEV_NAMESPACE }}

      - name: Deploy from DeploymentConfig
        env:
          OPENSHIFT_NAMESPACE: "ec1236-dev"
          APPLICATION_NAME: "set-api"
          DEPLOYMENT_CONFIG: "set-api-dc-template.yaml"
          IMAGE_REPOSITORY: "image-registry.apps.silver.devops.gov.bc.ca"
        run: |
          ./.github/helpers/deploy.sh

  healthcheck:
    name: Check Deployment Health
    runs-on: ubuntu-latest
    needs: [ deploy ]
    steps:
      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: github-actions
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_DEV_NAMESPACE }}
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_SA_DEV_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_DEV_NAMESPACE }}

      - name: Check Deployment Status
        run: |
          oc rollout status -n ${{ secrets.OPENSHIFT_DEV_NAMESPACE }} dc/set-api --watch

  cleanup:
    name: Clean Up
    runs-on: ubuntu-latest
    needs: [ healthcheck ]
    steps:
      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: github-actions
          OPENSHIFT_PROJECT: ${{ secrets.OPENSHIFT_DEV_NAMESPACE }}
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_SA_DEV_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_DEV_NAMESPACE }}

      - name: Remove previous objects
        run: |
          oc delete pod -n ${{ secrets.OPENSHIFT_DEV_NAMESPACE }} --field-selector status.phase=Succeeded

      - name: Remove previous replication controllers
        run: |
          oc delete rc -n ${{ secrets.OPENSHIFT_DEV_NAMESPACE }} --field-selector status.replicas=0
